plugins {
    id 'com.github.johnrengelman.shadow'
    id 'net.darkhax.curseforgegradle'
    id "com.modrinth.minotaur"
}

loom {
    forge {
        mixinConfig "seasonhud.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    //Serene Seasons
    modCompileOnly "maven.modrinth:serene-seasons:${project.serene_seasons_version}-forge"
    modCompileOnly "maven.modrinth:glitchcore:${project.glitchcore_version}-forge"
    compileOnly("net.jodah:typetools:0.6.3")

    //Terrafirmacraft
    modCompileOnly "maven.modrinth:terrafirmacraft:${project.terrafirmacraft_version}"
    modCompileOnly "maven.modrinth:patchouli:${project.patchouli_version}-forge"

    //Xaero's Minimap
    modCompileOnly "maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}_Forge_1.20"

    //JourneyMap
    modCompileOnly "maven.modrinth:journeymap:${project.minecraft_version}-${project.journeymap_version}-forge"

    //FTB Chunks + Dependencies
    modCompileOnly "curse.maven:ftb-chunks-forge-314906:${project.ftb_chunks_forge_version}"
    modCompileOnly "curse.maven:ftb-library-forge-404465:${project.ftb_library_forge_version}"
    modCompileOnly "curse.maven:ftb-teams-forge-404468:${project.ftb_teams_forge_version}"
    modCompileOnly "maven.modrinth:architectury-api:${project.architectury_version}+forge"

    //Map Atlases
    modCompileOnly "curse.maven:map-atlases-forge-519759:${project.map_atlases_forge_version}"
    modCompileOnly "maven.modrinth:moonlight:forge_1.20-${project.moonlight_version}"
    modCompileOnly "maven.modrinth:immediatelyfast:${project.immediatelyfast_version}+1.20.4-forge"

    //Curios + Accessories
    modCompileOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}"
    modCompileOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}:api"
    modCompileOnly "io.wispforest:accessories-neoforge:${project.accessories_version}"
    modCompileOnly "me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}") { transitive = false }

    // Minimap Mod Dev Tests
    // See root gradle.properties to choose which to use at runtime.
    switch (project.minimap_mod.toLowerCase(Locale.ROOT)) {
        case "xaero":
            modLocalRuntime "maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}_Forge_1.20"
            break
        case "journey":
            modLocalRuntime "maven.modrinth:journeymap:${project.minecraft_version}-${project.journeymap_version}-forge"
            break
        case "ftb":
            modLocalRuntime "curse.maven:ftb-chunks-forge-314906:${project.ftb_chunks_forge_version}"
            modLocalRuntime "curse.maven:ftb-library-forge-404465:${project.ftb_library_forge_version}"
            modLocalRuntime "curse.maven:ftb-teams-forge-404468:${project.ftb_teams_forge_version}"
            modLocalRuntime "maven.modrinth:architectury-api:${project.architectury_version}+forge"
            break
        case "atlas":
            modLocalRuntime "curse.maven:map-atlases-forge-519759:${project.map_atlases_forge_version}"
            modLocalRuntime("maven.modrinth:immediatelyfast:${project.immediatelyfast_version}+1.20.4-forge")
            modLocalRuntime "maven.modrinth:moonlight:forge_1.20-${project.moonlight_version}"
            compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
            implementation("io.github.llamalad7:mixinextras-forge:0.4.1")
            break
        case "none":
            break
        default: println("Unknown minimap mod specified: ${project.minimap_mod}. Must be xaero, journey, ftb, " +
                "atlas, or none")
    }

    // Accessory Mod Dev Tests
    // See root gradle.properties to choose which to use at runtime.
    switch (project.accessory_mod.toLowerCase(Locale.ROOT)) {
        case "accessories":
            modLocalRuntime("io.wispforest:accessories-neoforge:${project.accessories_version}") {
                transitive = false
            }
            modLocalRuntime "me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"
            modApi("dev.su5ed.sinytra.fabric-api:fabric-api-base:0.4.31+ef105b4977") {
                exclude group: "dev.su5ed.sinytra.fabric-api"
            }

            modApi("dev.su5ed.sinytra.fabric-api:fabric-data-attachment-api-v1:1.0.0+30ef839e77") {
                exclude group: "dev.su5ed.sinytra.fabric-api"
            }
            modApi("dev.su5ed.sinytra.fabric-api:fabric-entity-events-v1:1.6.0+6274ab9d77") {
                exclude group: "dev.su5ed.sinytra.fabric-api"
            }
            modApi("dev.su5ed.sinytra.fabric-api:fabric-object-builder-api-v1:11.1.3+2174fc8477") {
                exclude group: "dev.su5ed.sinytra.fabric-api"
            }
            forgeRuntimeLibrary("io.wispforest:endec:0.1.8")
            forgeRuntimeLibrary("io.wispforest.endec:gson:0.1.5")
            forgeRuntimeLibrary("io.wispforest.endec:netty:0.1.4")
            implementation("io.github.llamalad7:mixinextras-forge:0.3.5")
            break
        case "none":
            break
        default: println("Unknown accessory mod specified: ${project.minimap_mod}. Must be accessories, or none")
    }

    // Season Mod Dev Tests (Forge)
    // See root gradle.properties to choose which to use at runtime.
    switch (project.season_mod.toLowerCase(Locale.ROOT)) {
        case "serene":
            modImplementation "maven.modrinth:serene-seasons:${project.serene_seasons_version}-forge"
            modImplementation "maven.modrinth:glitchcore:${project.glitchcore_version}-forge"
            implementation("net.jodah:typetools:0.6.3")
            break
        case "terra":
            modImplementation "maven.modrinth:terrafirmacraft:${project.terrafirmacraft_version}"
            modImplementation "maven.modrinth:patchouli:${project.patchouli_version}-forge"
            break
        default: println("Unknown season mod specified: ${project.minimap_mod}. Must be serene or fabric")
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

modrinth {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_forge_id
    versionNumber = minecraft_version + "-" + version
    versionName = base.archivesName.get() + "-" + mod_version
    versionType = "release"
    uploadFile = remapJar

    List<String> mcVersions = modrinth_gameVersions.split(",")
    gameVersions = mcVersions
    loaders = ["forge", "neoforge"]

    changelog = recentChangelogText

    dependencies {
        required.project "serene-seasons"
        optional.project "curios"
        optional.project "accessories"
        optional.project "journeymap"
        optional.project "xaeros-minimap"
        optional.project "xaeros-minimap-fair"
        optional.project "map-atlases"
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "curseforge"

    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_forge_id, remapJar)
    mainFile.changelogType = "markdown"
    mainFile.changelog = recentChangelogText
    mainFile.releaseType = "release"

    List<String> mcVersions = curseforge_gameVersions.split(",")
    mainFile.gameVersions = mcVersions
    mainFile.addGameVersion("Forge")
    mainFile.addGameVersion("NeoForge")
    mainFile.addJavaVersion("Java 17")

    mainFile.addRequirement("serene-seasons")
    mainFile.addOptional("curios")
    mainFile.addOptional("accessories")
    mainFile.addOptional("ftb-chunks-forge")
    mainFile.addOptional("journeymap")
    mainFile.addOptional("xaeros-minimap")
    mainFile.addOptional("xaeros-minimap-fair-play-edition")
    mainFile.addOptional("map-atlases-forge")
}

task publishForge {
    group = "upload"
    afterEvaluate {
        dependsOn(tasks.publishCurseForge)
        dependsOn(tasks.modrinth)
    }
}